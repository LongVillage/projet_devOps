image: debian:bookworm

services:
  - docker:dind

variables:
  # Permet de communiquer avec docker:dind
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  AWS_DEFAULT_REGION: "eu-west-1"
  AWS_ECR_REPO: "131674823919.dkr.ecr.eu-west-3.amazonaws.com/dockerimage"

stages:
  - build
  - push
  - deploy

before_script:
  - echo "Installation des dépendances..."
  # Mise à jour et installation de curl
  - apk update && apk add --no-cache curl
  # Installation de kubectl
  - curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
  - chmod +x kubectl && mv kubectl /usr/local/bin/
  # Installation de Helm
  - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

  # # Installer Helm, Docker CLI, et autres dépendances nécessaires
  # - apk add --no-cache docker-cli curl jq python3 py3-pip kubectl
  # - pip install --no-cache-dir awscli
  # # Se connecter à ECR (Docker registry sur AWS)
  # - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin [your-aws-ecr-repo]

build-extract-data:
  stage: build
  script:
    # Construire l'image Docker pour extract-data
    - docker build -t [your-aws-ecr-repo]/extract-data:latest ./services/extract-data

# Push stage for extract-data
push-extract-data:
  stage: push
  script:
    # Pousser l'image vers ECR pour extract-data
    - docker push [your-aws-ecr-repo]/extract-data:latest

# Deploy stage for extract-data
deploy-extract-data:
  stage: deploy
  script:
    # Déployer les ressources Kubernetes avec Helm pour extract-data
    - helm upgrade --install extract-data charts/extract-data --namespace data-processing

# Build stage for train-model
build-train-model:
  stage: build
  script:
    # Construire l'image Docker pour train-model
    - docker build -t [your-aws-ecr-repo]/train-model:latest ./services/train-model

# Push stage for train-model
push-train-model:
  stage: push
  script:
    # Pousser l'image vers ECR pour train-model
    - docker push [your-aws-ecr-repo]/train-model:latest

# Deploy stage for train-model
deploy-train-model:
  stage: deploy
  script:
    # Déployer les ressources Kubernetes avec Helm pour train-model
    - helm upgrade --install train-model charts/train-model --namespace data-processing

# Build stage for predict-model
build-predict-model:
  stage: build
  script:
    # Construire l'image Docker pour predict-model
    - docker build -t [your-aws-ecr-repo]/predict-model:latest ./services/predict-model

# Push stage for predict-model
push-predict-model:
  stage: push
  script:
    # Pousser l'image vers ECR pour predict-model
    - docker push [your-aws-ecr-repo]/predict-model:latest

# Deploy stage for predict-model
deploy-predict-model:
  stage: deploy
  script:
    # Déployer les ressources Kubernetes avec Helm pour predict-model
    - helm upgrade --install predict-model charts/predict-model --namespace data-processing
build-django:
  stage: build
  script:
    # Construire l'image Docker pour Django depuis le dossier "Django"
    - docker build -t $AWS_ECR_REPO/djangocrypto/django-crypto:latest ./Django
  # Assurez-vous que le runner est en mode privilégié
  tags:
    - docker

push-django:
  stage: push
  script:
    # Pousser l'image vers ECR pour Django
    - docker push $AWS_ECR_REPO/djangocrypto/django-crypto:latest

deploy-django:
  stage: deploy
  script:
    # Appliquer les manifests Kubernetes pour Django depuis le dossier "k8s"
    - kubectl apply -f k8s/secret.yaml
    - kubectl apply -f k8s/configmap.yaml
    - kubectl apply -f k8s/django-service.yaml
    - kubectl apply -f k8s/django-deployment.yaml
    - kubectl apply -f k8s/ingress.yaml

build-streamlit:
  stage: build
  script:
    # Construire l'image Docker pour Streamlit depuis le dossier "streamlit"
    - docker build -t $AWS_ECR_REPO/streamlitcrypto/streamlit-crypto:latest ./streamlit
  tags:
    - docker

push-streamlit:
  stage: push
  script:
    # Pousser l'image vers ECR pour Streamlit
    - docker push $AWS_ECR_REPO/streamlitcrypto/streamlit-crypto:latest

deploy-streamlit:
  stage: deploy
  script:
    # Appliquer les manifests Kubernetes pour Streamlit depuis le dossier "k8s"
    - kubectl apply -f k8s/streamlit-service.yaml
    - kubectl apply -f k8s/streamlit-deployment.yaml